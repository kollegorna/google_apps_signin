<?php

/**
 * Implements hook_form_alter().
 */
function google_apps_signin_form_alter(&$form, $form_state, $form_id) {

  switch ($form_id) {
  case 'user_login_block':
  case 'user_login':
    $form['google_apps_link'] = array(
      '#markup' => l(t('Sign in with Google'), 'user/login/google_apps'),
      '#weight' => 10,
    );
  }
}

/*
 * Implementation of hook_libraries_info()
 */
function google_apps_signin_libraries_info() {

  $libraries['php-openid'] = array(
    'name' => 'PHP OpenID',
    'vendor url' => 'https://github.com/openid/php-openid',
    'download url' => 'https://github.com/openid/php-openid',
    'version arguments' => array(
      'file' => 'Auth/OpenID.php',
      'pattern' => "/define\(\'Auth_OpenID_VERSION\', \'(\d+\.\d+\.\d+)\'\)\;/",
      'lines' => 23,
    ),
    'files' => array(
      'php' => array(
        'Auth/OpenID.php',
        'Auth/OpenID/Consumer.php',
        'Auth/OpenID/AX.php',
        'Auth/OpenID/google_discovery.php',
        'Auth/OpenID/FileStore.php',
        'Auth/OpenID/SReg.php',
        'Auth/OpenID/PAPE.php',
      ),
    ),
  );

  return $libraries;
}

/*
 * Load the php-openid library
 */
function _google_apps_signin_load() {
  static $done = FALSE;
  if ($done) {
    return;
  }
  $done = TRUE;

  // TODO: The horror, the horror...
  set_include_path(get_include_path() . PATH_SEPARATOR . libraries_get_path('php-openid'));
  $library = libraries_load('php-openid');
}


/**
 * Implements hook_menu().
 */
function google_apps_signin_menu() {

  $items['user/login/google_apps'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => '_google_apps_signin_login',
    'access callback' => TRUE,
  );
  $items['user/login/google_apps/return'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => '_google_apps_signin_return',
    'access callback' => TRUE,
  );
  return $items;
}


/*
 * Get or make a temporary folder for caching the Google what-have-yous.
 */
function _google_apps_signin_get_temp_dir() {
  $temp_dir = variable_get('file_public_path', conf_path() . '/files/tmp');
  if (!is_dir($temp_dir)) {
    drupal_mkdir($temp_dir);
  }
  return $temp_dir;
}


/*
 * Sets the stage and redirects to Google
 */
function _google_apps_signin_login() {
  global $base_url;
  _google_apps_signin_load();

  $temp_dir = _google_apps_signin_get_temp_dir();

  // Cache for google discovery (much faster)
  $cache = new FileCache($temp_dir);

  // Open id lib has many warnig and notices
  //error_reporting(E_ALL ^ E_NOTICE ^ E_WARNING ^ E_USER_NOTICE);

  // Login time!
  $store = new Auth_OpenID_FileStore($temp_dir);
  $consumer = new Auth_OpenID_Consumer($store);
  new GApps_OpenID_Discovery($consumer, null, $cache);

  try {
    $auth_request = $consumer->begin(variable_get('google_apps_signin_domain', 'kollegorna.se'));
    if (!is_object($auth_request)) die('Auth request object error. Try again');
  } catch (Exception $error) {
    die($error->getMessage());
  }

  /// Request additional parameters
  $ax = new Auth_OpenID_AX_FetchRequest;
  $ax->add( Auth_OpenID_AX_AttrInfo::make('http://axschema.org/contact/email',2,1,'email') );
  $ax->add( Auth_OpenID_AX_AttrInfo::make('http://axschema.org/namePerson/first',1,1, 'firstname') );
  $ax->add( Auth_OpenID_AX_AttrInfo::make('http://axschema.org/namePerson/last',1,1, 'lastname') );

  $ax->add( Auth_OpenID_AX_AttrInfo::make('http://axschema.org/namePerson/friendly',1,1,'friendly') );
  $ax->add( Auth_OpenID_AX_AttrInfo::make('http://axschema.org/namePerson',1,1,'fullname') );
  $ax->add( Auth_OpenID_AX_AttrInfo::make('http://axschema.org/birthDate',1,1,'dob') );
  $ax->add( Auth_OpenID_AX_AttrInfo::make('http://axschema.org/person/gender',1,1,'gender') );
  $ax->add( Auth_OpenID_AX_AttrInfo::make('http://axschema.org/contact/postalCode/home',1,1,'postcode') );
  $ax->add( Auth_OpenID_AX_AttrInfo::make('http://axschema.org/contact/country/home',1,1,'country') );
  $ax->add( Auth_OpenID_AX_AttrInfo::make('http://axschema.org/pref/language',1,1,'language') );
  $ax->add( Auth_OpenID_AX_AttrInfo::make('http://axschema.org/pref/timezone',1,1,'timezone') );

  $auth_request->addExtension($ax);

  // Request URL for auth dialog url 
  $redirect_url = $auth_request->redirectURL(
    $base_url,
    $base_url .'/user/login/google_apps/return'
  );

  if (Auth_OpenID::isFailure($redirect_url)) {
    die('Could not redirect to server: ' . $redirect_url->message);
  } else {
    drupal_goto($redirect_url);
  }	
}


/*
 * Receives the redirect from Google
 *
 */
function _google_apps_signin_return() {
  global $base_url;
  $temp_dir = _google_apps_signin_get_temp_dir();
  _google_apps_signin_load();

  $store = new Auth_OpenID_FileStore($temp_dir);
  $consumer = new Auth_OpenID_Consumer($store);
  $cache = new FileCache($temp_dir);

  new GApps_OpenID_Discovery($consumer, null, $cache);

  $response = $consumer->complete($base_url . '/user/login/google_apps/return');


  if ($response->status == Auth_OpenID_SUCCESS) {
    // Extract returned information
    $openid = $response->getDisplayIdentifier();
    $ax = new Auth_OpenID_AX_FetchResponse();
    if ($ax) $ax = $ax->fromSuccessResponse($response);

    $sreg = Auth_OpenID_SRegResponse::fromSuccessResponse($response);
    if ($sreg ) $sreg = $sreg->contents();

    $name = $ax->data['http://axschema.org/namePerson/first'][0] . ' ' . $ax->data['http://axschema.org/namePerson/last'][0];
    user_external_login_register($name, 'google_apps_signin');
    // TODO: Add roles
    drupal_goto('user');
  }
  // Check the response status.
  if ($response->status == Auth_OpenID_CANCEL) drupal_set_message(t('OpenID Verification cancelled.'), 'error');
  else if ($response->status == Auth_OpenID_FAILURE) drupal_set_message(t('OpenID authentication failed: @error', array('@error' => $response->message)));
  else if ($response->status != Auth_OpenID_SUCCESS) drupal_set_message(t('Unknown OpenID error. Sorry.'));

  drupal_goto('user');
 # print response

 // var_dump($openid);
//  var_dump($ax->data);
 // var_dump($sreg);
}

class FileCache {
  var $cache_file;

  function __construct($tmp_path) {
    $this->cache_file = $tmp_path.DIRECTORY_SEPARATOR."google.tmp";
  }

  function get($name) {
    $cache = unserialize(file_get_contents($this->cache_file));
    return $cache[$name];
  }

  function set($name, $value) {
    $cache = unserialize(file_get_contents($this->cache_file));
    $cache[$name] = $value;
    file_put_contents($this->cache_file, serialize($cache));
  }

}


